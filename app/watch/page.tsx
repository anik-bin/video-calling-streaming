"use client";

import { useEffect, useRef } from 'react';
import Hls from 'hls.js';

export default function WatchPage() {
    // Create a ref to attach to our video element
    const videoRef = useRef<HTMLVideoElement>(null);

    // Path to our HLS playlist
    // This file is generated by FFmpeg in the /public/live directory
    const hlsSource = '/live/playlist.m3u8';

    useEffect(() => {
        // This effect runs once when the component mounts
        let hls: Hls | null = null;

        if (videoRef.current) {
            const videoElement = videoRef.current;

            // Check if the browser supports HLS natively (like Safari)
            if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                // If it does, just set the source directly
                videoElement.src = hlsSource;
                videoElement.addEventListener('loadedmetadata', () => {
                    videoElement.play();
                });
            }
            // If HLS is supported by hls.js
            else if (Hls.isSupported()) {
                console.log("Using hls.js for playback");
                hls = new Hls();

                // Load the HLS source
                hls.loadSource(hlsSource);
                // Attach hls.js to the video element
                hls.attachMedia(videoElement);

                // When the manifest is parsed, play the video
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                    videoElement.play();
                });

                // Listen for errors
                hls.on(Hls.Events.ERROR, function (event, data) {
                    if (data.fatal) {
                        console.error('Fatal HLS error occurred, trying to recover...', data);
                        hls?.startLoad(); // or hls.recoverMediaError();
                    }
                });
            }
        }

        // Cleanup function: This is crucial for preventing memory leaks
        return () => {
            if (hls) {
                console.log("Destroying hls.js instance");
                hls.destroy();
            }
        };
    }, [hlsSource]); // Re-run the effect if hlsSource changes (it won't in this app)

    return (
        <div className="flex flex-col items-center gap-4 w-full">
            <h1 className="text-3xl font-bold">Watch Page</h1>
            <p className="text-gray-400">You are watching the live stream.</p>

            <div className="w-full max-w-4xl aspect-video bg-black rounded-lg border-2 border-red-600 shadow-lg">
                {/* The video element that will play our stream */}
                <video ref={videoRef} className="w-full h-full object-cover" controls autoPlay muted playsInline />
            </div>

            <div className="mt-4 p-4 bg-gray-800 rounded-lg text-left w-full max-w-4xl">
                <h2 className="text-xl font-semibold mb-2">How this works:</h2>
                <ul className="list-disc list-inside text-gray-300">
                    <li>A user on the <code className="bg-gray-700 p-1 rounded">/stream</code> page is sending their camera feed to the server.</li>
                    <li>The server uses FFmpeg to convert this feed into an HLS (HTTP Live Streaming) format.</li>
                    <li>This page uses the <code className="bg-gray-700 p-1 rounded">hls.js</code> library to play that stream.</li>
                    <li className="text-red-400"><strong>Note:</strong> There is a natural delay (latency) of 5-15 seconds with HLS streaming.</li>
                </ul>
            </div>
        </div>
    );
}